---
- name: install postgresql
  ansible.builtin.yum:
    name:
      - postgresql-{{ pg_version }}
      - postgresql-server-{{ pg_version }}
      - postgresql-contrib-{{ pg_version }}
    use_backend: yum4        
    state: present

- name: install required packages for psycopg2
  ansible.builtin.yum:
    name:
      - pip
      - libpq-devel
      - python3-devel
      - gcc
    use_backend: yum4        
    state: present    

- name: check if pg_hba.conf file exists
  stat: 
    path: /var/lib/pgsql/data/pg_hba.conf
  register: pg_hba_conf

- name: upload postgres user password file
  ansible.builtin.template:
    src: "postgres_user_password.j2"
    dest: /var/lib/pgsql/postgres_user_password
  when: pg_hba_conf.stat.exists == False

- name: init postgresql db
  ansible.builtin.command: /usr/bin/postgresql-setup --initdb
  args:
    creates: /var/lib/pgsql/data/pg_hba.conf
  environment:
    PGSETUP_INITDB_OPTIONS: "--auth-host=scram-sha-256 --username=postgres --pwfile=/var/lib/pgsql/postgres_user_password"
  become: true
  become_user: postgres

- name: Remove postgres password file
  ansible.builtin.file:
    path: /var/lib/pgsql/postgres_user_password
    state: absent  

- name: enable service postgresql
  ansible.builtin.systemd:
    name: postgresql
    enabled: yes

- name: run postgres service
  ansible.builtin.systemd:
    name: postgresql
    state: started

# psycopg2 required for community.postgresql
- name: Install wheel python package 
  ansible.builtin.pip:
    name: wheel

# psycopg2 required for community.postgresql
- name: Install psycopg2 python package 
  ansible.builtin.pip:
    name: psycopg2

#- name: Connect to postgres database and update password
#  community.postgresql.postgresql_user:
#    db: postgres
#    user: postgres
#    password: "{{ postgres_db_user_password }}"   
#  become: yes
#  become_user: postgres     

- name: Create a new database with name "hntoplinks"
  community.postgresql.postgresql_db:
    login_host: localhost
    login_user: postgres    
    login_password: "{{ postgres_db_user_password }}" 
    name: hntoplinks    
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    template: template0
  become: true
  become_user: postgres       

- name: Create hntoplinks user
  community.postgresql.postgresql_user:
    login_host: localhost
    login_user: postgres    
    login_password: "{{ postgres_db_user_password }}"   
    db: hntoplinks
    user: hntoplinks
    password: "{{ hntoplinks_db_user_password }}" 
    role_attr_flags: NOSUPERUSER,NOCREATEDB
  become: true
  become_user: postgres 
    
#- name: Grant hntoplinks password access
#  community.postgresql.postgresql_pg_hba:
#    dest: /var/lib/pgsql/data/pg_hba.conf
#    contype: host
#    users: hntoplinks
#    source: 127.0.0.1/32
#    databases: hntoplinks
#    method: scram-sha-256
#    create: true
#  register: postgresql_config

- name: change owner of hntoplinks database
  community.postgresql.postgresql_owner:
    login_host: localhost
    login_user: postgres    
    login_password: "{{ postgres_db_user_password }}"   
    db: hntoplinks
    new_owner: hntoplinks
    obj_type: database
    obj_name: hntoplinks
  become: true
  become_user: postgres   

- name: GRANT ALL PRIVILEGES ON DATABASE hntoplinks TO hntoplinks
  community.postgresql.postgresql_privs:
    login_host: localhost
    login_user: postgres    
    login_password: "{{ postgres_db_user_password }}"   
    db: hntoplinks
    privs: ALL
    type: database
    obj: hntoplinks
    role: hntoplinks  
  become: true
  become_user: postgres

